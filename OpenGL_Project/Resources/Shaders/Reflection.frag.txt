#version 460 core

#define MAX_POINT_LIGHTS 4

// Inputs from Vertex Shader
in vec2 FragTexCoords;
in vec3 FragNormal;
in vec3 FragPos;

// Uniform Inputs
uniform sampler2D Texture0;
uniform samplerCube Texture_Skybox;
uniform sampler2D Texture_ReflectionMap;
uniform vec3 CameraPosition;

uniform vec3 LightColor;
uniform vec3 LightPos;

uniform vec3 AmbientColor;
uniform float AmbientStrength;

uniform float LightSpecularStrength;
uniform float ObjectShininess;

struct PointLight
{
	vec3 Position;
	vec3 Color;
	float SpecularStrength;

	float AttenuationConstant;
	float AttenuationLinear;
	float AttenuationExponent;
};

struct DirectionalLight
{
	vec3 Direction;
	vec3 Color;
	float SpecularStrength;
};

uniform PointLight PointLightArray[MAX_POINT_LIGHTS];
uniform unsigned int PointLightCount;

uniform DirectionalLight DirectionalLight1;

// reflection

uniform float Testing;

// Output
out vec4 FinalColor;



void main()
{	
	vec3 ReflectDir;
	vec3 Ambient = AmbientStrength * AmbientColor;

	// total light contribution from all lights
	vec3 TotalLightOutput = vec3(0.0f);
	
	// Light Direction
	vec3 Normal = normalize(FragNormal);

	// iterate over each point
	for (int i = 0; i < PointLightCount; i++)
	{
		// Light direction
        vec3 LightDir = normalize(PointLightArray[i].Position - FragPos);
		vec3 ViewDir = normalize(FragPos - CameraPosition);
		ReflectDir = reflect(ViewDir, Normal);

        // Diffuse component
        float DiffuseStrength = max(dot(Normal, LightDir), 0.0f);
        vec3 Diffuse = DiffuseStrength * PointLightArray[i].Color;

        // Specular component
        vec3 ReverseViewDir = normalize(CameraPosition - FragPos);
        vec3 HalfwayVector = normalize(LightDir + ReverseViewDir);
        float SpecularReflectivity = pow(max(dot(Normal, HalfwayVector), 0.0f), ObjectShininess);
        vec3 Specular = PointLightArray[i].SpecularStrength * SpecularReflectivity * PointLightArray[i].Color;


        // Accumulate the light contribution from this point light
        TotalLightOutput += Diffuse + Specular;



		// Attenuation
		float Distance = length(PointLightArray[i].Position - FragPos);
		float Attenuation = PointLightArray[i].AttenuationConstant + (PointLightArray[i].AttenuationLinear * Distance) + (PointLightArray[i].AttenuationExponent * pow(Distance, 2));

		TotalLightOutput /= Attenuation;
	}


		// Light direction
        vec3 LightDir = DirectionalLight1.Direction;

        // Diffuse component
        float DiffuseStrength = max(dot(Normal, LightDir), 0.0f);
        vec3 Diffuse = DiffuseStrength * DirectionalLight1.Color;

        // Specular component
        vec3 ReverseViewDir = normalize(CameraPosition - FragPos);
        vec3 HalfwayVector = normalize(LightDir + ReverseViewDir);
        float SpecularReflectivity = pow(max(dot(Normal, HalfwayVector), 0.0f), ObjectShininess);
        vec3 Specular = DirectionalLight1.SpecularStrength * SpecularReflectivity * DirectionalLight1.Color;

        // Accumulate the light contribution from this point light
        TotalLightOutput += (Diffuse + Specular)*0.2f;





	// Combine the lighting components
    vec3 Light = Ambient + TotalLightOutput;

	vec4 ObjectTexture = texture(Texture0, FragTexCoords);
	vec4 ReflectionTexture = texture(Texture_Skybox, ReflectDir);
	float Reflectivity = texture(Texture_ReflectionMap, FragTexCoords).r; // sample the red channel of the reflection map

	FinalColor = vec4(Light, 1.0f) * mix(ObjectTexture, ReflectionTexture, Reflectivity);
	//FinalColor = vec4(Light, 1.0f) * ObjectTexture;
	//FinalColor =  PointLightArray[0].SpecularStrength * texture(Texture0, FragTexCoords); // works
	//FinalColor =  PointLightArray[1].SpecularStrength * texture(Texture0, FragTexCoords); // works
}
